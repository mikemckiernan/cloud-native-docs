.. license-header
  SPDX-FileCopyrightText: Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
  SPDX-License-Identifier: Apache-2.0

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

.. headings (h1/h2/h3/h4/h5) are # * = -

###################################
NVIDIA GPU Operator with Amazon EKS
###################################

.. contents::
   :depth: 2
   :local:
   :backlinks: none


******************************************
Considerations for Working with Amazon EKS
******************************************

Running workloads and using NVIDIA GPUs with Amazon EKS offers at least
three approaches:

Option 1: Use default EKS configuration, no GPU Operator
  By default, you can run Amazon EKS optimized Amazon Linux AMIs on instance types
  that support NVIDIA GPUs.

  Using the default configuration has the following limitations:

  * The pre-installed NVIDIA GPU driver version and NVIDIA container runtime version
    lags the release schedule from NVIDIA.
  * You must deploy the NVIDIA device plugin and you assume responsibility for
    upgrading the plugin.

  If these limitations are acceptable to you, you can refer to
  `Amazon EKS optimized Amazon Linux AMIs <https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html>`_
  in the Amazon EKS documentation for information about configuring your cluster
  and you do not need to install the NVIDIA GPU Operator.

Option 2: Use default EKS configuration, add GPU Operator
  You can configure your EKS cluster according to Option 1 and also run the NVIDIA GPU Operator.

  In this case, you still experience the limitations identified in the preceding list,
  but the Operator can deploy and manage other operands like the NVIDIA Container Toolkit and
  NVIDIA MIG Manager.

  FIXME: Can customers just jump to installing the Operator with Helm?

Option 3: Create a node group with an optimized AMI and run the GPU Operator
  You can create a node group for your cluster based on instance types that have
  NVIDIA GPUs and use an AMI with a supported operating system.

  In this case, the Operator manages the lifecycle of all the operands, including
  the NVIDIA GPU driver containers.
  This approach enables you to run the most recent NVIDIA GPU drivers and use the
  Operator to manage upgrades of the driver and other software components such as
  the NVIDIA device plugin, NVIDIA Container Toolkit, and NVIDIA MIG Manager.

  This approach provides the most up-to-date software and the Operator reduces
  the administrative overhead.


****************************************
About Using the Operator with Amazon EKS
****************************************

To use the NVIDIA GPU Operator with Amazon Elastic Kubernetes Service (EKS)
without any of the limitations described in the preceding section, you perform the
following high-level actions:

* Create a node group with instance types that have NVIDIA GPUs.

  Refer to the table of `Accelerated Computing <https://aws.amazon.com/ec2/instance-types/#Accelerated_Computing>`_
  instance types in the Amazon EC2 documentation.

* Use an Amazon EKS optimized Amazon Machine Image (AMI) with a supported operating system,
  such as Ubuntu 20.04, on the nodes in the node group.

  AMIs support are specific to an AWS region and Kubernetes version.
  See https://cloud-images.ubuntu.com/aws-eks/ for the AMI values such as ``ami-00687acd80b7a620a``.


*************
Prerequisites
*************

* You installed and configured the AWS CLI.
  Refer to
  `Installing or updating to the latest version of the AWS CLI <https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html>`_
  and `Configuring the AWS CLI <https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html>`_
  in the AWS CLI documentation.
* You installed the ``eksctl`` CLI.
  The CLI is available from https://eksctl.io/introduction/#installation.
  If you prefer to use the AWS Management Console, refer to the :ref:`Related Information` section for
  Amazon EKS documentation resources.
* You have the AMI value from https://cloud-images.ubuntu.com/aws-eks/.
* You have the EC2 instance type to use for your nodes.


*********
Procedure
*********

Perform the following steps to create an Amazon EKS cluster with the ``eksctl`` CLI.
The steps create a node group that uses an Amazon EKS optimized AMI.

#. Create a file, such as ``cluster-config.yaml``, with contents like the following example:

   .. literalinclude:: ./manifests/input/amazon-eks-cluster-config.yaml
      :language: yaml

   Replace the values for the cluster name, Kubernetes version, and so on.
   To resolve the environment variables in the override bootstrap command, you must source the bootstrap helper script.

#. Create the Amazon EKS cluster with the unmanaged node group:

   .. code-block:: console

      $ eksctl create cluster -f cluster-config.yaml

   Creating the cluster requires several minutes.

   *Example Output*

   .. code-block:: output

      2022-08-19 17:51:04 [i]  eksctl version 0.105.0
      2022-08-19 17:51:04 [i]  using region us-west-2
      2022-08-19 17:51:04 [i]  setting availability zones to [us-west-2d us-west-2c us-west-2a]
      2022-08-19 17:51:04 [i]  subnets for us-west-2d - public:192.168.0.0/19 private:192.168.96.0/19
      ...
      [âœ“]  EKS cluster "demo-cluster" in "us-west-2" region is ready

#. Optional: View the cluster name:

   .. code-block:: console

      $ eksctl get cluster

   *Example Output*

   .. code-block:: output

      NAME          REGION     EKSCTL CREATED
      demo-cluster  us-west-2  True


**********
Next Steps
**********

* By default, ``eksctl`` adds the Kubernetes configuration information to your
  ``~/.kube/config`` file.
  You can run ``kubectl get nodes -o wide`` to view the nodes in the Amazon EKS cluster.

* You are ready to :ref:`install the NVIDIA GPU Operator <install-gpu-operator>`
  with Helm.

  If you specified a Kubernetes version less than ``1.25``, then specify ``--set psp.enabled=true``
  when you run the ``helm install`` command.


*******************
Related Information
*******************

* The preceding procedure is derived from
  `Getting started with Amazon EKS - eksctl <https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html>`_
  in the Amazon EKS documentation.
* If you have an existing Amazon EKS cluster, you can refer to
  `Launching self-managed Amazon Linux nodes <https://docs.aws.amazon.com/eks/latest/userguide/launch-workers.html>`_
  in the Amazon EKS documentation to add an unmanaged node group to your cluster.
  This documentation includes steps for using the AWS Management Console.